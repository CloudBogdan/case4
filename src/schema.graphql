type Query {
    workers: [Worker]!
    worker(id: ID!): Worker

    humans: [Human]!
    human(id: ID!): Human
}
type Mutation {
    # > Add worker üë®‚úÖ
    addWorker(
        firstName: String!
        lastName: String!
        middleName: String!
        birthday: String!
        human_id: ID!
        date: String!

        login: String!
        password: String!
    ): Worker
    # > Add human üë®‚Äçü¶≥‚úÖ
    addHuman(
        firstName: String!
        lastName: String!
        middleName: String!
        birthday: String!
        date: String!

        login: String!
        password: String!
    ): Human

    # > Update worker üë®‚è´
    updateWorker(
        id: ID!
        
        firstName: String
        lastName: String
        middleName: String
        birthday: String
        human_id: ID
        date: String

        login: String
        password: String
    ): Worker
    # > Update human üë®‚Äçü¶≥‚è´
    updateHuman(
        id: ID!
        
        firstName: String
        lastName: String
        middleName: String
        birthday: String
        date: String

        login: String
        password: String
    ): Human

    # > Remove worker üë®‚ùå
    removeWorker(id: ID!): Worker
    # > Remove human üë®‚Äçü¶≥‚ùå
    removeHuman(id: ID!): Human
}

# > Types
type Worker {
    id: ID!
    
    firstName: String # –ò–º—è
    lastName: String # –§–∞–º–∏–ª–∏—è
    middleName: String # –û—Ç—á–µ—Å—Ç–≤–æ
    birthday: String # –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
    human_id: ID! # ID –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞(HR)
    human: Human! # –ù–∞—á–∞–ª—å–Ω–∏–∫(HR)
    date: String # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    login: String # –õ–æ–≥–∏–Ω
    password: String # –ü–∞—Ä–æ–ª—å
}
type Human {
    id: ID!
    
    firstName: String
    lastName: String
    middleName: String
    birthday: String
    date: String

    login: String
    password: String

    workers: [Worker]! # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏\—Ä–∞–±–æ—Ç–Ω–∏–∫–∏
}